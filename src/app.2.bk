function getParentById(id: number): Promise<Person[]> {
    return new Promise<Person[]>((resolve, reject) => {
        setTimeout(
            () => {
                const person = DB.find((x) => x.id === id);
                if (!person) {
                    reject("Person not found");
                    return;
                }
                const parents = [];
                for (const parent of person.parentIds) {
                    const cur = DB.find((x) => x.id === parent);
                    if (!cur) {
                        reject("Parent not found");
                        return;
                    }
                    parents.push(cur);
                }
                resolve(parents);
            },
            Math.round(Math.random() * 100)
        );
    });
}

function main() {
    getParentById(1)
        .then((parents) => {
            console.log(parents);
        })
        .catch((err) => {
            console.log(err);
        });

    getParentById(10)
        .then((parents) => {
            console.log(parents);
        })
        .catch((err) => {
            console.log(err);
        });
}

main();

///
const DB: Person[] = [
    {
        id: 1,
        name: "Antonio",
        parentIds: [2, 3]
    },
    {
        id: 2,
        name: "Marco",
        parentIds: []
    },
    {
        id: 3,
        name: "Sandra",
        parentIds: []
    }
];

type Person = {
    id: number;
    name: string;
    parentIds: number[]; // [1,2]
};
