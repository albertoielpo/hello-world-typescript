function getParentById(id: number): Promise<Person[]> {
    return new Promise<Person[]>((resolve, reject) => {
        setTimeout(
            () => {
                const person = DB.find((x) => x.id === id);
                if (!person) {
                    console.log(`reject for id ${id}`);
                    reject("Person not found");
                    return;
                }
                const parents = [];
                for (const parent of person.parentIds) {
                    const cur = DB.find((x) => x.id === parent);
                    if (!cur) {
                        reject("Parent not found");
                        return;
                    }
                    parents.push(cur);
                }
                console.log(`resolve for id ${id}`);
                resolve(parents);
            },
            Math.round(Math.random() * 100)
        );
    });
}

async function main2() {
    try {
        const parents = await getParentById(1);
        console.log(parents);
    } catch (error) {
        console.log(error);
    }
    try {
        const parents = await getParentById(10);
        console.log(parents);
    } catch (error) {
        console.log(error);
    }
}

async function main() {
    const prs = await Promise.allSettled([getParentById(1), getParentById(10)]);
    for (let parents of prs) {
        if (parents.status === "fulfilled") {
            console.log(parents.value);
        } else {
            console.log(parents.reason);
        }
    }
}

main();

const DB: Person[] = [
    {
        id: 1,
        name: "Antonio",
        parentIds: [2, 3]
    },
    {
        id: 2,
        name: "Marco",
        parentIds: []
    },
    {
        id: 3,
        name: "Sandra",
        parentIds: []
    }
];

type Person = {
    id: number;
    name: string;
    parentIds: number[]; // [1,2]
};
